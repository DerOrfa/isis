Description: Upstream changes introduced in version 0.3.3-1
Author: Michael Hanke <mih@debian.org>
--- isis-0.3.3.orig/lib/Core/CMakeLists.txt
+++ isis-0.3.3/lib/Core/CMakeLists.txt
@@ -30,7 +30,7 @@ set(ISIS_LIB_DEPENDS  ${CMAKE_DL_LIBS} $
 ############################################################
 # Build config
 ############################################################
-set(ISIS_BUILD_PROPERTIES LINK_FLAGS "--no-undefined" CLEAN_DIRECT_OUTPUT 1)
+set(ISIS_BUILD_PROPERTIES CLEAN_DIRECT_OUTPUT 1)
 set(ISIS_BUILD_STATIC OFF CACHE BOOL "enable build of the static library. If OFF a dynamic library will be build and
 linked." )
 
@@ -43,14 +43,35 @@ file(GLOB CORE_SRC_FILES "DataStorage/*.
 file(GLOB COREUTILS_HDR_FILES "CoreUtils/*.hpp" "CoreUtils/*.h")
 file(GLOB DATASTORAGE_HDR_FILES "DataStorage/*.hpp" "DataStorage/*.h")
 
+
+macro( build_static target)
+    add_library( ${target} STATIC ${CORE_SRC_FILES} )
+    set_target_properties( ${target} PROPERTIES OUTPUT_NAME "isis_core")
+    set(target_list ${target_list} ${target})
+endmacro( build_static )
+
+macro( build_shared target)
+    add_library( ${target}  SHARED ${CORE_SRC_FILES} )
+    target_link_libraries( isis_core ${CMAKE_DL_LIBS} ${Boost_LIBRARIES} ${LibOil_LIBRARY})
+    set_target_properties( isis_core PROPERTIES	${ISIS_BUILD_PROPERTIES} VERSION ${${CMAKE_PROJECT_NAME}_VERSION} INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib")
+    set(target_list ${target_list} ${target})
+endmacro( build_shared )
+
 # the core library shared and static build
-if(ISIS_BUILD_STATIC)
-	add_library( isis_core STATIC ${CORE_SRC_FILES} )
+
+#for packaging purpose we want to build both, shared and static with one build_command
+#however this capability is not provided by an option in the cmake menu
+if(ISIS_BUILD_STATIC_AND_SHARED)
+    build_static( isis_core_static )
+    build_shared( isis_core )
+else(ISIS_BUILD_STATIC_AND_SHARED)
+    if(ISIS_BUILD_STATIC)
+	build_static( isis_core )
     else(ISIS_BUILD_STATIC)
-	add_library( isis_core SHARED ${CORE_SRC_FILES} )
-	target_link_libraries( isis_core ${CMAKE_DL_LIBS} ${Boost_LIBRARIES} ${LibOil_LIBRARY})
-	set_target_properties( isis_core PROPERTIES	${ISIS_BUILD_PROPERTIES} VERSION ${${CMAKE_PROJECT_NAME}_VERSION} INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib")
-endif(ISIS_BUILD_STATIC)
+	build_shared( isis_core )
+    endif(ISIS_BUILD_STATIC)
+endif(ISIS_BUILD_STATIC_AND_SHARED)
+
 
 ############################################################
 # set the plugin directory and the system dependend shared
@@ -65,7 +86,7 @@ set_source_files_properties( "DataStorag
 ############################################################
 
 # install libraries
-install (TARGETS isis_core
+install (TARGETS ${target_list}
   LIBRARY DESTINATION lib COMPONENT RuntimeLibraries
   ARCHIVE DESTINATION lib COMPONENT Development)
 
--- isis-0.3.3.orig/lib/Core/DataStorage/chunk.cpp
+++ isis-0.3.3/lib/Core/DataStorage/chunk.cpp
@@ -248,6 +248,7 @@ std::list<Chunk> Chunk::autoSplice ( uin
 	BOOST_FOREACH( Chunk & ref, ret ) { // adapt some metadata in them
 		util::fvector4 &orig = ref.propertyValue( "indexOrigin" )->castTo<util::fvector4>();
 		uint32_t &acq = ref.propertyValue( "acquisitionNumber" )->castTo<uint32_t>();
+		LOG(Debug,verbose_info) << "Origin was " << orig << " will be moved by " << indexOriginOffset << "*"  << cnt;
 		orig = orig + indexOriginOffset * ( float )cnt;
 		acq += acquisitionNumberStride * cnt; //@todo this might cause trouble if we try to insert this chunks into an image
 		cnt++;
--- isis-0.3.3.orig/lib/Core/DataStorage/sortedchunklist.cpp
+++ isis-0.3.3/lib/Core/DataStorage/sortedchunklist.cpp
@@ -37,7 +37,7 @@ SortedChunkList::scalarPropCompare::scal
 bool SortedChunkList::posCompare::operator()( const util::fvector4 &posA, const util::fvector4 &posB ) const
 {
 	if ( posA.lexical_less_reverse( posB ) ) { //if chunk is "under" the other - put it there
-		LOG( Debug, verbose_info ) << "Successfully sorted chunks by position (" << posA << " below " << posB << ")";
+		LOG( Debug, verbose_info ) << "Successfully sorted chunks by in-image position (" << posA << " below " << posB << ")";
 		return true;
 	}
 
@@ -124,7 +124,7 @@ std::pair<boost::shared_ptr<Chunk>, bool
 
 	if( ch.hasProperty( "sliceVec" ) )
 		sliceVec = ch.propertyValue( "sliceVec" )->castTo<util::fvector4>();
-	else {
+	else { //@todo should not be neccesary
 		sliceVec = util::fvector4(
 					   rowVec[1] * columnVec[2] - rowVec[2] * columnVec[1],
 					   rowVec[2] * columnVec[0] - rowVec[0] * columnVec[2],
--- isis-0.3.3.orig/lib/Core/DataStorage/image.cpp
+++ isis-0.3.3/lib/Core/DataStorage/image.cpp
@@ -818,6 +818,7 @@ size_t Image::spliceDownTo( dimensions d
 				}
 			} else { // seems like we're done - insert it into the image
 				assert( ch.getRelevantDims() == ( size_t ) m_dim ); // index of the higest dim>1 (ch.getRelevantDims()-1) shall be equal to the dim below the requested splicing (m_dim-1)
+				LOG(Debug,verbose_info) << "Inserting splice result of size " << ch.getSizeAsVector() << " at " << ch.propertyValue("indexOrigin");
 				m_image.insertChunk( ch );
 			}
 		}
--- isis-0.3.3.orig/cmake/Modules/Doxyfile.in
+++ isis-0.3.3/cmake/Modules/Doxyfile.in
@@ -21,7 +21,6 @@ SHORT_NAMES            = NO
 JAVADOC_AUTOBRIEF      = YES
 QT_AUTOBRIEF           = NO
 MULTILINE_CPP_IS_BRIEF = NO
-DETAILS_AT_TOP         = NO
 INHERIT_DOCS           = YES
 SEPARATE_MEMBER_PAGES  = NO
 TAB_SIZE               = 4
--- isis-0.3.3.orig/tests/DataStorage/imageTest.cpp
+++ isis-0.3.3/tests/DataStorage/imageTest.cpp
@@ -642,12 +642,14 @@ BOOST_AUTO_TEST_CASE ( image_splice_test
 	BOOST_REQUIRE( img.isClean() );
 	BOOST_REQUIRE( img.isValid() );
 	BOOST_REQUIRE( !img.isEmpty() );
+
 	img.spliceDownTo( data::sliceDim );
 	std::vector<data::Chunk > chunks = img.copyChunksToVector( false );
 	BOOST_CHECK_EQUAL( chunks.size(), 100 );
 
 	for( size_t i = 0; i < chunks.size(); i++ ) {
 		BOOST_CHECK_EQUAL( chunks[i].getPropertyAs<int32_t>( "acquisitionNumber" ), i + 1 );
+		BOOST_CHECK_EQUAL( chunks[i].getPropertyAs<util::fvector4>( "indexOrigin"), util::fvector4(0,0,i%10,0) );
 	}
 }
 
