// Generated by Bisonc++ V4.13.01 on Wed, 09 Nov 2016 17:00:23 +0100

#ifndef vista_internalVistaParser_h_included
#define vista_internalVistaParser_h_included

#include "VistaScanner.h"
#include "VistaParserbase.h"

// $insert namespace-open
namespace vista_internal
{

#undef VistaParser
class VistaParser: public VistaParserBase
{
    // $insert scannerobject
    VistaScanner d_scanner;
        
    public:
        int parse();
		VistaParser(const std::string &filename){
			d_scanner.switchIstream(filename);
		}


    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
};

// $insert namespace-close
}

#endif
